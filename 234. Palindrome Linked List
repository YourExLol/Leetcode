## Problem Statement ##
## 234. Palindrome Linked List
## https://leetcode.com/problems/palindrome-linked-list/

############################################### Code begins here ##############################################################

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode * reverse(ListNode* head){
        if(head->next==NULL) return head;

        ListNode *prev=NULL,*next=NULL,*curr=head;

        while(curr!=NULL){
            next=curr->next;
            curr->next=prev;
            prev=curr;
            curr=next;
        }
        return prev;
    }
    bool isPalindrome(ListNode* head) {
        if(head==NULL) return false;
        if(head->next==NULL) return true;

        ListNode * slow=head,*fast=head;

        while(fast!=NULL && fast->next!=NULL){
            slow=slow->next;
            fast=fast->next->next;
        }
        
        ListNode* rev_head=reverse(slow);


        while(head!=NULL && rev_head!=NULL){
            if(head->val!=rev_head->val) return false;
            head=head->next;
            rev_head=rev_head->next;
        }
        
        return true;

        
    }
};
